// "use strict";

// –£ –Ω–∞—Å –µ—Å—Ç—å 3 —Å—É—â–Ω–æ—Å—Ç–∏: —Ç—Ä–∞–≤–∞ (üåø), —Ç—Ä–∞–≤–æ—è–¥–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ (üêÑ), —Ö–∏—â–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ (üêÜ).
// –¢—Ä–∞–≤–æ—è–¥–Ω–æ–µ –º–æ–∂–µ—Ç —Å–æ–∂—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç—Ä–∞–≤—É, —Ö–∏—â–Ω–∏–∫ –º–æ–∂–µ—Ç —Å–æ–∂—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç—Ä–∞–≤–æ—è–¥–Ω–æ–µ, —Ç—Ä–∞–≤–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ –º–æ–∂–µ—Ç —Å–æ–∂—Ä–∞—Ç—å.

// –°–æ–∑–¥–∞–µ—Ç—Å—è —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥–æ–π —Å—É—â–Ω–æ—Å—Ç–∏ –æ—Ç 10 –¥–æ 20;
// –û–Ω–∏ —Å–∫–ª–∞–¥—ã–≤–∞—é—Ç—Å—è –≤ –æ–¥–∏–Ω –º–∞—Å—Å–∏–≤ –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ;
// –î–∞–ª—å—à–µ –∑–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –∫–∞–∂–¥–æ–µ —Å—É—â–µ—Å—Ç–≤–æ –º–æ–∂–µ—Ç –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è —Å–æ–∂—Ä–∞—Ç—å –±–ª–∏–∂–∞–π—à–µ–≥–æ (—Å–ª–µ–≤–∞ –∏ —Å–ø—Ä–∞–≤–∞);

// –í–∞–∂–Ω–æ —Å–ª–µ–¥–∏—Ç—å, —á—Ç–æ–±—ã —Å—É—â–µ—Å—Ç–≤–æ –ø–æ —Ü–µ–ø–æ—á–∫–µ –Ω–∏–∂–µ –Ω–µ —Å–º–æ–≥–ª–æ —Å–æ–∂—Ä–∞—Ç—å —Å—É—â–µ—Å—Ç–≤–æ –≤—ã—à–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç—Ä–∞–≤–∞ –Ω–µ –º–æ–∂–µ—Ç —Å–æ–∂—Ä–∞—Ç—å –∂–∏–≤–æ—Ç–Ω–æ–≥–æ).

// –í—ã–≤–µ—Å—Ç–∏ –≤ –Ω–∞—á–∞–ª–µ:
// - –°–∫–æ–ª—å–∫–æ –∫–æ–≥–æ
// - –ö–∞–∫ –æ–Ω–∏ —Ä–∞—Å–ø–æ–ª–∞–≥–∞—é—Ç—Å—è - [üåøüêÜüêÑ]
// –í—ã–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Ü–µ:
// - –°–∫–æ–ª—å–∫–æ –∫–æ–≥–æ –æ—Å—Ç–∞–ª–æ—Å—å
// - –ö–∞–∫ –æ–Ω–∏ —Ä–∞—Å–ø–æ–ª–∞–≥–∞—é—Ç—Å—è [üåøüêÜüêÑ]
// - –ö—Ç–æ –ø–æ–±–µ–¥–∏–ª

// 1. –ö–ª–∞—Å—Å Nature —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º –≤ –≤–∏–¥–µ –ø—É—Å—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–µ
// 2. –í –∫–ª–∞—Å—Å–µ Nature –º–µ—Ç–æ–¥ pushThemUp –∫–æ—Ç–æ—Ä—ã–π —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –ø—É—à–∏—Ç –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã —Å–µ–±–µ –≤ –º–∞—Å—Å–∏–≤
// 3. –í –∫–ª–∞—Å—Å–µ life –º–µ—Ç–æ–¥ –∏—Å–ø–æ–ª–Ω—è–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –º–∞—Å—Å–∏–≤–∞ —Å–ª–µ–≤–∞ –∏–ª–∏ —Å–ø—Ä–∞–≤–∞ –æ—Ç —Å–µ–±—è
// 4. –í –∫–ª–∞—Å—Å–∞—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏ —Ç—Ä–∞–≤—ã –∑–∞–¥–∞–µ–º —É—Å–ª–æ–≤–∏—è –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –º–µ—Ç–æ–¥–∞ –∏–∑ –∫–ª–∞—Å—Å–∞ life
// –í—ã–≤–µ—Å—Ç–∏ –≤ –Ω–∞—á–∞–ª–µ:
// - –°–∫–æ–ª—å–∫–æ –∫–æ–≥–æ
// - –ö–∞–∫ –æ–Ω–∏ —Ä–∞—Å–ø–æ–ª–∞–≥–∞—é—Ç—Å—è - [üåøüêÜüêÑ]
// –í—ã–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Ü–µ:
// - –°–∫–æ–ª—å–∫–æ –∫–æ–≥–æ –æ—Å—Ç–∞–ª–æ—Å—å
// - –ö–∞–∫ –æ–Ω–∏ —Ä–∞—Å–ø–æ–ª–∞–≥–∞—é—Ç—Å—è [üåøüêÜüêÑ]
// - –ö—Ç–æ –ø–æ–±–µ–¥–∏–ª


// Math.floor(Math.random() * (20 - 10) + 10) –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—É—â–Ω–æ—Å—Ç–µ–π –æ—Ç 10 –¥–æ 20
// .sort(() => Math.random() - 0.5) –¥–ª—è –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è –º–∞—Å—Å–∏–≤–∞
//.filter(item => item === grass.name).length –Ω–∞–π—Ç–∏ –∫–æ–ª-–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤–µ –ø–æ —É—Å–ª–æ–≤–∏—é

// –î–∞–ª—å—à–µ –∑–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –∫–∞–∂–¥–æ–µ —Å—É—â–µ—Å—Ç–≤–æ –º–æ–∂–µ—Ç –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è —Å–æ–∂—Ä–∞—Ç—å –±–ª–∏–∂–∞–π—à–µ–≥–æ (—Å–ª–µ–≤–∞ –∏ —Å–ø—Ä–∞–≤–∞);
// –í–∞–∂–Ω–æ —Å–ª–µ–¥–∏—Ç—å, —á—Ç–æ–±—ã —Å—É—â–µ—Å—Ç–≤–æ –ø–æ —Ü–µ–ø–æ—á–∫–µ –Ω–∏–∂–µ –Ω–µ —Å–º–æ–≥–ª–æ —Å–æ–∂—Ä–∞—Ç—å —Å—É—â–µ—Å—Ç–≤–æ –≤—ã—à–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç—Ä–∞–≤–∞ –Ω–µ –º–æ–∂–µ—Ç —Å–æ–∂—Ä–∞—Ç—å –∂–∏–≤–æ—Ç–Ω–æ–≥–æ).
// 1. –ö–∞–∫ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —ç–ª–µ–º–µ–Ω—Ç—É –≤ –º–∞—Å—Å–∏–≤–µ
// 1.1. –ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ–±—ã –æ–Ω —É–¥–∞–ª—è–ª —ç–ª–µ–º–µ–Ω—Ç —Å–ª–µ–≤–∞ (—Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º)  arr[i - 1] === *item instanceof Class*
// 1.2. –ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ–±—ã –æ–Ω —É–¥–∞–ª—è–ª —ç–ª–µ–º–µ–Ω—Ç —Å–ø—Ä–∞–≤–∞ (—Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º) arr[i + 1] === *item instanceof Class*
// * —É–¥–∞–ª–∏–ª –∏–∑ –º–∞—Å—Å–∏–≤–∞ –ø—Ä–∏ —ç—Ç–æ–º –Ω–µ –æ—Å—Ç–∞–≤–∏–≤ –Ω–µ –µ–≥–æ –º–µ—Å—Ç–µ –ø—É—Å—Ç–æ—Ç—É  *splice(start,deleteCount)*
// (—Å–ø–æ—Å–æ–±—ã —É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –º–∞—Å—Å–∏–≤–∞ –Ω–µ —Å–Ω–∞—á–∞–ª–∞ –∏–ª–∏ –∫–æ–Ω—Ü–∞ –∏ –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏–π –∫–æ–ø–∏–π:
// –ï—Å–ª–∏ –ø–µ—Ä–≤–∞—è —Ñ–æ—Ä–º–∞ —ç—Ç–æ —Ö–∏—â–Ω–∏–∫ , –∞ —Å–æ—Å–µ–¥ —Å–ø—Ä–∞–≤–∞ —Ç—Ä–∞–≤–∞ —Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å
// –ï—Å–¥–∏ –ø–µ—Ä–≤–∞—è —Ñ–æ—Ä–º–∞ —ç—Ç–æ —Ö–∏—â–Ω–∏–∫ , –∞ —Å–æ—Å–µ–¥ —Å–ø—Ä–∞–≤–∞ —Ç—Ä–∞–≤–æ—è–¥–Ω—ã–π —Ç–æ —É–¥–∞–ª–∏—Ç—å –µ–≥–æ –∏–∑ –º–∞—Å—Å–∏–≤–∞
// –ï—Å–¥–∏ –ø–µ—Ä–≤–∞—è —Ñ–æ—Ä–º–∞ —ç—Ç–æ —Ö–∏—â–Ω–∏–∫ , –∞ —Å–æ—Å–µ–¥ —Å–ø—Ä–∞–≤–∞ —Ö–∏—â–Ω–∏–∫ —Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å
// –ï—Å–ª–∏ –ø–µ—Ä–≤–∞—è —Ñ–æ—Ä–º–∞ —ç—Ç–æ —Ç—Ä–∞–≤–∞ , –∞ —Å–æ—Å–µ–¥ —Å–ø—Ä–∞–≤–∞ —Ç—Ä–∞–≤–∞ —Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å
// –ï—Å–¥–∏ –ø–µ—Ä–≤–∞—è —Ñ–æ—Ä–º–∞ —ç—Ç–æ —Ç—Ä–∞–≤–∞ , –∞ —Å–æ—Å–µ–¥ —Å–ø—Ä–∞–≤–∞ —Ç—Ä–∞–≤–æ—è–¥–Ω—ã–π –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å
// –ï—Å–¥–∏ –ø–µ—Ä–≤–∞—è —Ñ–æ—Ä–º–∞ —ç—Ç–æ —Ç—Ä–∞–≤–∞ , –∞ —Å–æ—Å–µ–¥ —Å–ø—Ä–∞–≤–∞ —Ö–∏—â–Ω–∏–∫ —Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å
// –ï—Å–ª–∏ –ø–µ—Ä–≤–∞—è —Ñ–æ—Ä–º–∞ —ç—Ç–æ —Ç—Ä–∞–≤–æ—è–¥–Ω—ã–π , –∞ —Å–æ—Å–µ–¥ —Å–ø—Ä–∞–≤–∞ —Ç—Ä–∞–≤–∞ —Ç–æ —É–¥–∞–ª–∏—Ç—å –µ–≥–æ –∏–∑ –º–∞—Å—Å–∏–≤–∞
// –ï—Å–¥–∏ –ø–µ—Ä–≤–∞—è —Ñ–æ—Ä–º–∞ —ç—Ç–æ —Ç—Ä–∞–≤–æ—è–¥–Ω—ã–π , –∞ —Å–æ—Å–µ–¥ —Å–ø—Ä–∞–≤–∞ —Ç—Ä–∞–≤–æ—è–¥–Ω—ã–π —Ç–æ —É–¥–∞–ª–∏—Ç—å –µ–≥–æ –∏–∑ –º–∞—Å—Å–∏–≤–∞
// –ï—Å–¥–∏ –ø–µ—Ä–≤–∞—è —Ñ–æ—Ä–º–∞ —ç—Ç–æ —Ç—Ä–∞–≤–æ—è–¥–Ω—ã–π , –∞ —Å–æ—Å–µ–¥ —Å–ø—Ä–∞–≤–∞ —Ö–∏—â–Ω–∏–∫ —Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å


// üêÜüêÑ üåø


class Nature {
    constructor() {
        this.wildNature = []
        this.generationOfNumbers = Math.floor(Math.random() * (20 - 10) + 10)
    }
    pushThemUp() {
        for (let i = 0; i < this.generationOfNumbers; i++) {
            this.wildNature.push(new Predator(i))
            this.wildNature.push(new Herbivore(i))
            this.wildNature.push(new Grass(i))
        }
        this.wildNature.sort(() => Math.random() - 0.5)
        let howManyGrasses = this.wildNature.filter(item => item instanceof Grass).length
        let howManyPredators = this.wildNature.filter(item => item instanceof Predator).length
        let howManyHerbivores = this.wildNature.filter(item => item instanceof Herbivore).length
        console.log(`—Ç—Ä–∞–≤—ã : ${howManyGrasses} —à—Ç—É–∫`)
        console.log(`—Ö–∏—â–Ω–∏–∫–æ–≤ : ${howManyPredators} —à—Ç—É–∫`)
        console.log(`—Ç—Ä–∞–≤–æ—è–¥–Ω—ã—Ö : ${howManyHerbivores} —à—Ç—É–∫`)
        console.log(nature.wildNature)

    }
    fight() {
        for (let i = 0; i < this.wildNature.length; i++) {
            if (this.wildNature[i] instanceof Predator && i < this.wildNature.length - 1 && this.wildNature[i + 1] instanceof Herbivore) {
                this.wildNature.splice(i + 1, 1)
            }
            if (this.wildNature[i] instanceof Predator && i > 0 && this.wildNature[i - 1] instanceof Herbivore) {
                this.wildNature.splice(i - 1, 1)
            }
            if (this.wildNature[i] instanceof Herbivore && i < this.wildNature.length - 1 && this.wildNature[i + 1] instanceof Grass) {
                this.wildNature.splice(i + 1, 1)
            }
            if (this.wildNature[i] instanceof Herbivore && i > 0 && this.wildNature[i - 1] instanceof Grass) {
                this.wildNature.splice(i - 1, 1)
            }
        }
        let howManyGrasses = this.wildNature.filter(item => item instanceof Grass).length
        let howManyPredators = this.wildNature.filter(item => item instanceof Predator).length
        let howManyHerbivores = this.wildNature.filter(item => item instanceof Herbivore).length
        console.log(`—Ç—Ä–∞–≤—ã : ${howManyGrasses} —à—Ç—É–∫`)
        console.log(`—Ö–∏—â–Ω–∏–∫–æ–≤ : ${howManyPredators} —à—Ç—É–∫`)
        console.log(`—Ç—Ä–∞–≤–æ—è–¥–Ω—ã—Ö : ${howManyHerbivores} —à—Ç—É–∫`)
        console.log(nature.wildNature)
        if (howManyPredators > howManyGrasses && howManyPredators > howManyHerbivores) {
            console.log(`–ø–æ–±–µ–¥–∏–ª–∏ —Ö–∏—â–Ω–∏–∫–∏`)
        }
        if (howManyGrasses > howManyPredators && howManyGrasses > howManyHerbivores) {
            console.log(`–ø–æ–±–µ–¥–∏–ª–∏ —Ç—Ä–∞–≤—ã`)
        }
        if (howManyHerbivores > howManyGrasses && howManyHerbivores > howManyPredators) {
            console.log(`–ø–æ–±–µ–¥–∏–ª–∏ —Ç—Ä–∞–≤–æ—è–¥–Ω—ã–µ`)
        }
    }
}

class Grass {
    constructor(num) {
        this._name = 'üåø'
        this.num = num
    }
    get name() {
        return this._name
    }
}
class Herbivore {
    constructor(num) {
        this._name = 'üêÑ'
        this.num = num
    }
    get name() {
        return this._name
    }
    eat() {

    }
}
class Predator {
    constructor(num) {
        this._name = 'üêÜ'
        this.num = num
    }
    get name() {
        return this._name
    }
    eat() {

    }

}


const nature = new Nature()
const predator = new Predator(1)
const herbivore = new Herbivore(1)



nature.pushThemUp()
nature.fight()
