"use strict";

// function delay(ms) {
//     return new Promise((resolve) => setTimeout(resolve, ms))
// }
// delay(3000).then(() => alert('–≤—ã–ø–æ–ª–Ω–∏–ª–æ—Å—å —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã'));


// –°–ø–∞–Ω—á–±–æ–± –≥–æ—Ç–æ–≤–∏—Ç –±—É—Ä–≥–µ—Ä—ã –∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã –∫–∞–∂–¥—ã–π.
// –ú—ã —Å–¥–µ–ª–∞–ª–∏ –∑–∞–∫–∞–∑ –Ω–∞ 5 –±—É—Ä–≥–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é createOrder(count) –∏ —Å–µ–ª–∏ –∑–∞ —Å—Ç–æ–ª. 
// –ò —Ç–µ–ø–µ—Ä—å –º—ã –∂–¥–µ–º, –ø–æ–∫–∞ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç –ø—Ä–∏–Ω–µ—Å–µ—Ç –Ω–∞–º –∑–∞–∫–∞–∑ –∏ —Å–∫–∞–∂–µ–º ‚Äú–°–ø–∞—Å–∏–±–æ –∑–∞ N –±—É—Ä–≥–µ—Ä–æ–≤!‚Äù

function createOrder(count) {
    const burger = 'üçî'
    const burgers = []
    const possibility = Math.random()
    return new Promise(function (resolve, reject) {
        setTimeout(function cook() {
            burgers.push(burger)
            if (burgers.length === count) {
                if (possibility > 0.5) {
                    burgers.pop()
                    reject(new Error('–Ω–µ—Ç—É –æ–¥–Ω–æ–≥–æ –±—É—Ä–≥–µ—Ä–∞'))
                }
                resolve(burgers)
            } else {
                setTimeout(cook, 2000)
            }
        }, 2000)
    })
}
const orderedCount = 5;
let promise = createOrder(orderedCount);

promise
    .then((order) => console.log(`–°–ø–∞—Å–∏–±–æ –∑–∞ ${order.length} –±—É—Ä–≥–µ—Ä–æ–≤!`))
    .catch((error) => console.log(`–ü—Ä–æ—Å—Ç–∏—Ç–µ –Ω–æ —Ç—É—Ç ${error.message}`))
