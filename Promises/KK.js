'use strict'


// –ù–∞ —Å–∫–ª–∞–¥ –≤ –∫—Ä–∞—Å—Ç–∏-–∫—Ä–∞–±—Å –∑–∞–≤–µ–∑–ª–∏ –æ—Ç 20 –¥–æ 40 –±—É–ª–æ—á–µ–∫ –∏ –æ—Ç 10 –¥–æ 20 –∫–æ—Ç–ª–µ—Ç.
// –í —Ä–µ—Å—Ç–æ—Ä–∞–Ω –ø—Ä–∏—à–µ–ª –ø–∞—Ç—Ä–∏–∫ –∏ –∑–∞–∫–∞–∑–∞–ª –æ—Ç 5 –¥–æ 25 –±—É—Ä–≥–µ—Ä–æ–≤.
// –ï—Å–ª–∏ —Å–ø–∞–Ω—á–±–æ–± —Å–º–æ–≥ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –≤—Å–µ –±—É—Ä–≥–µ—Ä—ã, —Ç–æ –¥–æ–ª–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏—Ç—å ‚Äú–ù—è–º –Ω—è–º –±—ã–ª–æ –≤–∫—É—Å–Ω–æ‚Äù.
// –ï—Å–ª–∏ –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–æ–≤ –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ, —Ç–æ –¥–æ–ª–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ ‚Äú–Ø –æ–ø—è—Ç—å –æ—Å—Ç–∞–ª—Å—è –≥–æ–ª–æ–¥–Ω—ã–π‚Äù.

// –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –∑–∞–±—ã—Ç—å –≤—ã–≤–µ—Å—Ç–∏ —Å–∫–æ–ª—å–∫–æ –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–æ–≤ –±—ã–ª–æ –∏ —Å–∫–æ–ª—å–∫–æ –±—É—Ä–≥–µ—Ä–æ–≤ –±—ã–ª–æ –∑–∞–∫–∞–∑–∞–Ω–æ.


// 1. –ï—Å—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –±—É–ª–æ—á–µ–∫(20 –¥–æ 40 )
// 2. –ï—Å—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –∫–æ—Ç–ª–µ—Ç (10 –¥–æ 20)
// 3. 2 –±—É–ª–∫–∏ –∏ 1 –∫–æ—Ç–ª–µ—Ç–∞ === 1 –±—É—Ä–≥–µ—Ä
// 4. –ö–ª–∏–µ–Ω—Ç —Å–¥–µ–ª–∞–ª —Å–ª—É—á–∞–π–Ω—ã–π –∑–∞–∫–∞–∑(5 –¥–æ 25 –±—É—Ä–≥–µ—Ä–æ–≤)
// 5  –ò–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–æ–≤ —É –Ω–∞—Å –Ω–µ —Ä–∞–≤–Ω–æ–µ –∫–æ–ª-–≤–æ, –µ—Å–ª–∏ 1 –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ –±—É—Ä–≥–µ—Ä—ã –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ
// 6. –ï—Å–ª–∏ —Ç–æ —á—Ç–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—é –∑–∞–∫–∞–∑–∞ , —Ç–æ –∫–ª–∏–µ–Ω—Ç –≥–æ–≤–æ—Ä–∏—Ç ‚Äú–ù—è–º –Ω—è–º –±—ã–ª–æ –≤–∫—É—Å–Ω–æ‚Äù
// 7. –ï—Å–ª–∏ –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–æ–≤ –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ, —Ç–æ –¥–æ–ª–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ ‚Äú–Ø –æ–ø—è—Ç—å –æ—Å—Ç–∞–ª—Å—è –≥–æ–ª–æ–¥–Ω—ã–π‚Äù.



function generateRandomNumber(minNumber, maxNumber) {
    return Math.floor(Math.random() * (maxNumber - minNumber) + minNumber)
}

function createOrder(count) {
    let meat = generateRandomNumber(10, 20)
    let buns = generateRandomNumber(20, 40)
    const burger = 'üçî'
    const burgers = []
    console.log(`–ë—ã–ª–æ: ${meat} –∫–æ—Ç–ª–µ—Ç , ${buns} –±—É–ª–æ—á–µ–∫. –ó–∞–∫–∞–∑–∞–Ω–æ : ${count} –±—É—Ä–≥–µ—Ä–æ–≤`)
    return new Promise(function (resolve, reject) {
        setTimeout(function cookBurger() {
            meat -= 1
            buns -= 2
            burgers.push(burger)
            if (burgers.length === count) {
                resolve(burgers)
            } else if (meat === 0 || buns === 0) {
                reject(new Error('–∑–∞–ø–∞—Å—ã –∫–æ–Ω—á–∏–ª–∏—Å—å'))
            } else {
                setTimeout(cookBurger, 1000)
            }
        }, 1000)
    })
}

const orderedCount = generateRandomNumber(5, 25);
let promise = createOrder(orderedCount)

promise
    .then((burgers) => console.log(`–ù—è–º –Ω—è–º –±—ã–ª–æ –≤–∫—É—Å–Ω–æ! –Ø —Å—å–µ–ª –≤—Å–µ ${burgers.length} –±—É—Ä–≥–µ—Ä–æ–≤`))
    .catch((error) => console.log(`–Ø –æ–ø—è—Ç—å –æ—Å—Ç–∞–ª—Å—è –≥–æ–ª–æ–¥–Ω—ã–π , –Ω–∞–≤–µ—Ä–Ω–æ–µ —É –≤–∞—Å ${error.message}`))



